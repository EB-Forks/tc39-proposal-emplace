<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Map.prototype.emplace
stage: 2
contributors: Erica Pramer
</pre>

<emu-intro id="intro">
  <h1>Introduction</h1>
  <p>Given a `key` and a handler object, the `emplace` method will either remap an existing entry, insert a new entry from a mapping function, or both. `emplace` will return
  the updated or inserted value.</p>
</emu-intro>

<emu-clause id="sec-map.prototype.emplace">
  <h1>Map.prototype.emplace(key, handler)</h1>
  <p>When the emplace method is called the following steps are taken:</p>
  <emu-alg>
    1. Let _M_ be the *this* value.
    2. Perform ? RequireInternalSlot(M, [[MapData]]).
    3. Let entries be the List that is M.[[MapData]].
    5. Let _entries_ be the List that is _M_.
    6. For each Record { [[Key]], [[Value]] } _e_ that is an element of _entries_, in original key insertion order, do
      1. If e.[[Key]] is not empty and SameValueZero(e.[[Key]], _key_) is *true* then
        1. If HasProperty(handler, "update") is *true* then
          1. Let _updateFn_ be Get(handler, "update").
          2. Let _updated_ be ? Call(_updateFn_, *undefined*, « e.[[Value]], _key_, _M_ ») 
          3. Set _e_.[[Value]] to _updated_.
          4. Return _e_.[[Value]]
        2. Return _e_.[[Value]]
    7. Let _insertFn_ be Get(handler, "insert").
    8. Let _inserted_ be ? Call(_insertFn_, *undefined*, « e.[[Value]], _key_, _M_ ») 
    9. Set _e_.[[Value]] to _inserted_.
    10. Return _e_.[[Value]]
  </emu-alg>
</emu-clause>

<emu-clause id="sec-weakmap.prototype.emplace">
  <h1>WeakMap.prototype.emplace(key, updateFn [ , insertFn])</h1>
  <p>When the emplace method is called the following steps are taken:</p>
  <emu-alg>
    1. Let _M_ be the *this* value.
    2. Perform ? RequireInternalSlot(M, [[WeakMapData]]).
    3. Let entries be the List that is M.[[WeakMapData]].
    5. Let _entries_ be the List that is _M_.
    6. For each Record { [[Key]], [[Value]] } _e_ that is an element of _entries_, in original key insertion order, do
      1. If e.[[Key]] is not empty and SameValueZero(e.[[Key]], _key_) is *true* then
        1. If HasProperty(handler, "update") is *true* then
          1. Let _updateFn_ be Get(handler, "update").
          2. Let _updated_ be ? Call(_updateFn_, *undefined*, « e.[[Value]], _key_, _M_ ») 
          3. Set _e_.[[Value]] to _updated_.
          4. Return _e_.[[Value]]
        2. Return _e_.[[Value]]
    7. Let _insertFn_ be Get(handler, "insert").
    8. Let _inserted_ be ? Call(_insertFn_, *undefined*, « e.[[Value]], _key_, _M_ ») 
    9. Set _e_.[[Value]] to _inserted_.
    10. Return _e_.[[Value]]
  </emu-alg>
</emu-clause>
